import * as express from 'express';
import * as options from '../options';
import { CallableRequest, FunctionsErrorCode, HttpsError, Request, TaskRateLimits, TaskRequest, TaskRetryConfig } from '../../common/providers/https';
import { ManifestEndpoint } from '../../runtime/manifest';
export { Request, CallableRequest, FunctionsErrorCode, HttpsError, TaskRateLimits, TaskRequest, TaskRetryConfig as TaskRetryPolicy, };
export interface HttpsOptions extends Omit<options.GlobalOptions, 'region'> {
    region?: options.SupportedRegion | string | Array<options.SupportedRegion | string>;
    cors?: string | boolean | RegExp | Array<string | RegExp>;
}
export interface TaskQueueOptions extends options.GlobalOptions {
    retryConfig?: TaskRetryConfig;
    rateLimits?: TaskRateLimits;
    /**
     * Who can enqueue tasks for this function.
     * If left unspecified, only service accounts which have
     * roles/cloudtasks.enqueuer and roles/cloudfunctions.invoker
     * will have permissions.
     */
    invoker?: 'private' | string | string[];
}
export declare type HttpsFunction = ((req: Request, res: express.Response) => void | Promise<void>) & {
    __trigger?: unknown;
    __endpoint: ManifestEndpoint;
};
export interface CallableFunction<T, Return> extends HttpsFunction {
    run(data: CallableRequest<T>): Return;
}
export interface TaskQueueFunction<T = any> extends HttpsFunction {
    run(data: TaskRequest<T>): void | Promise<void>;
}
export declare function onRequest(opts: HttpsOptions, handler: (request: Request, response: express.Response) => void | Promise<void>): HttpsFunction;
export declare function onRequest(handler: (request: Request, response: express.Response) => void | Promise<void>): HttpsFunction;
export declare function onCall<T = any, Return = any | Promise<any>>(opts: HttpsOptions, handler: (request: CallableRequest<T>) => Return): CallableFunction<T, Return>;
export declare function onCall<T = any, Return = any | Promise<any>>(handler: (request: CallableRequest<T>) => Return): CallableFunction<T, Return>;
/** Handle a request sent to a Cloud Tasks queue. */
export declare function onTaskDispatched<Args = any>(handler: (request: TaskRequest<Args>) => void | Promise<void>): TaskQueueFunction<Args>;
/** Handle a request sent to a Cloud Tasks queue. */
export declare function onTaskDispatched<Args = any>(options: TaskQueueOptions, handler: (request: TaskRequest<Args>) => void | Promise<void>): TaskQueueFunction<Args>;
